[{"C:\\Users\\kenne\\OneDrive\\Documents\\ReactWebPage\\InsuranceApp\\InsuranceApp\\InsuranceApp\\frontEnd\\src\\index.js":"1","C:\\Users\\kenne\\OneDrive\\Documents\\ReactWebPage\\InsuranceApp\\InsuranceApp\\InsuranceApp\\frontEnd\\src\\App.js":"2","C:\\Users\\kenne\\OneDrive\\Documents\\ReactWebPage\\InsuranceApp\\InsuranceApp\\InsuranceApp\\frontEnd\\src\\Components\\FormPage.js":"3"},{"size":259,"mtime":1628724039867,"results":"4","hashOfConfig":"5"},{"size":1907,"mtime":1628801189283,"results":"6","hashOfConfig":"5"},{"size":3065,"mtime":1628801186715,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"kdt30l",{"filePath":"11","messages":"12","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"13","messages":"14","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"C:\\Users\\kenne\\OneDrive\\Documents\\ReactWebPage\\InsuranceApp\\InsuranceApp\\InsuranceApp\\frontEnd\\src\\index.js",[],["16","17"],"C:\\Users\\kenne\\OneDrive\\Documents\\ReactWebPage\\InsuranceApp\\InsuranceApp\\InsuranceApp\\frontEnd\\src\\App.js",["18","19","20","21"],"C:\\Users\\kenne\\OneDrive\\Documents\\ReactWebPage\\InsuranceApp\\InsuranceApp\\InsuranceApp\\frontEnd\\src\\Components\\FormPage.js",["22","23","24","25"],"import React, { useState, useContext} from 'react';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {\r\n    Form, Button\r\n} from 'react-bootstrap';\r\n\r\n\r\nvar formStyle = {\r\n    position: 'absolute', left: '50%', top: '75%',\r\n    transform: 'translate(-10%, -90%)',\r\n    height: '60%',\r\n    width: '40%',\r\n    borderRadius: '20px',\r\n    backgroundColor: '#ffffff'\r\n}\r\n\r\n\r\nfunction FormPage() {\r\n    const [phoneBrand, setPhoneBrand] = useState();\r\n    const [phoneCondition, setPhoneCondition] = useState();\r\n    const [email, setEmail] = useState();\r\n\r\n    var total = 100;\r\n\r\n    const submit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        if (phoneBrand == \"apple\")\r\n            total = total + 25;\r\n        if (phoneCondition == \"2\")\r\n            total = total + 20;\r\n        if (phoneCondition == \"3\")\r\n            total = total + 40;\r\n\r\n\r\n        console.log(\"Your coverage cost would be : $\" +total + \" would you like us to send you your offer to: \"+email);\r\n\r\n    };\r\n\r\n\r\n    return (\r\n\r\n            <div className=\"Form\">\r\n            <Form style={formStyle} onSubmit={submit}>\r\n                <br />\r\n                <h1 align=\"middle\" style={{ color: 'black', fontSize: '35px'}}>Find out your premium!</h1>\r\n                <h6 align=\"middle\" style={{ color: 'black' }}>Fill form below</h6>\r\n           \r\n           \r\n\r\n                <Form.Group controlId=\"formEmail\" style={{ margin: \"15px\" }}>\r\n                    <Form.Label>Enter Email</Form.Label>\r\n                    <Form.Control type=\"email\" placeholder=\"Enter Email\" onChange={(e) => setEmail(e.target.value)} />\r\n                </Form.Group>\r\n  \r\n\r\n                <Form.Group controlId=\"phoneBrand\" style={{ margin: \"15px\" }}>\r\n                    <Form.Label>Select Phone Brand</Form.Label>\r\n                    <Form.Control onChange={(e) => setPhoneBrand(e.target.value)} as=\"select\" custom >\r\n                        <option value=\"apple\">Apple</option>\r\n                        <option value=\"samsung\">Samsung</option>\r\n                        <option value=\"other\">Other</option>\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"phoneCondition\" style={{ margin: \"15px\" }}>\r\n                    <Form.Label>Select Phone Condition</Form.Label>\r\n                    <Form.Control as=\"select\" custom placeholder=\"Select Phone Condition\" onChange={(e) => setPhoneCondition(e.target.value)}>\r\n                        <option value=\"1\">Excellent</option>\r\n                        <option value=\"2\">Good</option>\r\n                        <option value=\"3\">Fair</option>\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"getQuote\" style={{ margin: \"20px\" }}>\r\n                    <Button align=\"middle\" variant=\"secondary\" type=\"submit\" block>\r\n                        Get Quote\r\n                            </Button>\r\n                </Form.Group>\r\n         \r\n\r\n            </Form>\r\n           \r\n     </div>\r\n   \r\n    );\r\n}\r\n\r\nexport default FormPage;\r\n",{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":3,"column":35,"nodeType":"32","messageId":"33","endLine":3,"endColumn":40},{"ruleId":"30","severity":1,"message":"34","line":6,"column":10,"nodeType":"32","messageId":"33","endLine":6,"endColumn":20},{"ruleId":"30","severity":1,"message":"35","line":6,"column":22,"nodeType":"32","messageId":"33","endLine":6,"endColumn":31},{"ruleId":"30","severity":1,"message":"36","line":6,"column":33,"nodeType":"32","messageId":"33","endLine":6,"endColumn":42},{"ruleId":"30","severity":1,"message":"37","line":1,"column":27,"nodeType":"32","messageId":"33","endLine":1,"endColumn":37},{"ruleId":"38","severity":1,"message":"39","line":28,"column":24,"nodeType":"40","messageId":"41","endLine":28,"endColumn":26},{"ruleId":"38","severity":1,"message":"39","line":30,"column":28,"nodeType":"40","messageId":"41","endLine":30,"endColumn":30},{"ruleId":"38","severity":1,"message":"39","line":32,"column":28,"nodeType":"40","messageId":"41","endLine":32,"endColumn":30},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'jumbostron' is defined but never used.","'Jumbotron' is defined but never used.","'Container' is defined but never used.","'useContext' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]